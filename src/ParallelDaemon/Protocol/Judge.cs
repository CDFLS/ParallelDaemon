// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: judge.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace ParallelDaemon.Protocol {

  /// <summary>Holder for reflection information generated from judge.proto</summary>
  public static partial class JudgeReflection {

    #region Descriptor
    /// <summary>File descriptor for judge.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static JudgeReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgtqdWRnZS5wcm90bxIOcGFyYWxsZWxkYWVtb24iawoMSnVkZ2VSZXF1ZXN0",
            "EhgKEHNwZWNpYWxfanVkZ2VfaWQYASABKA0SFQoNc3VibWlzc2lvbl9pZBgC",
            "IAEoDRISCgp0ZXN0X3BvaW50GAMgASgJEhYKDnNvdXJjZV9jb2RlX2lkGAQg",
            "ASgJIpUCCgtKdWRnZVJlc3VsdBI0CgR0eXBlGAEgASgOMiYucGFyYWxsZWxk",
            "YWVtb24uSnVkZ2VSZXN1bHQuUmVzdWx0VHlwZRIVCg1zdWJtaXNzaW9uX2lk",
            "GAIgASgNEhIKCnRlc3RfcG9pbnQYAyABKA0SEgoKdGltZV91c2FnZRgEIAEo",
            "DRIUCgxtZW1vcnlfdXNhZ2UYBSABKA0SDAoEaW5mbxgGIAEoCSJtCgpSZXN1",
            "bHRUeXBlEgwKCEFjY2VwdGVkEAASDwoLV3JvbmdBbnN3ZXIQARIVChFUaW1l",
            "TGltaXRFeGNlZWRlZBACEhcKE01lbW9yeUxpbWl0RXhjZWVkZWQQAxIQCgxS",
            "dW50aW1lRXJyb3IQBEIaqgIXUGFyYWxsZWxEYWVtb24uUHJvdG9jb2xiBnBy",
            "b3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::ParallelDaemon.Protocol.JudgeRequest), global::ParallelDaemon.Protocol.JudgeRequest.Parser, new[]{ "SpecialJudgeId", "SubmissionId", "TestPoint", "SourceCodeId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ParallelDaemon.Protocol.JudgeResult), global::ParallelDaemon.Protocol.JudgeResult.Parser, new[]{ "Type", "SubmissionId", "TestPoint", "TimeUsage", "MemoryUsage", "Info" }, null, new[]{ typeof(global::ParallelDaemon.Protocol.JudgeResult.Types.ResultType) }, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class JudgeRequest : pb::IMessage<JudgeRequest> {
    private static readonly pb::MessageParser<JudgeRequest> _parser = new pb::MessageParser<JudgeRequest>(() => new JudgeRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<JudgeRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ParallelDaemon.Protocol.JudgeReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JudgeRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JudgeRequest(JudgeRequest other) : this() {
      specialJudgeId_ = other.specialJudgeId_;
      submissionId_ = other.submissionId_;
      testPoint_ = other.testPoint_;
      sourceCodeId_ = other.sourceCodeId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JudgeRequest Clone() {
      return new JudgeRequest(this);
    }

    /// <summary>Field number for the "special_judge_id" field.</summary>
    public const int SpecialJudgeIdFieldNumber = 1;
    private uint specialJudgeId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SpecialJudgeId {
      get { return specialJudgeId_; }
      set {
        specialJudgeId_ = value;
      }
    }

    /// <summary>Field number for the "submission_id" field.</summary>
    public const int SubmissionIdFieldNumber = 2;
    private uint submissionId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SubmissionId {
      get { return submissionId_; }
      set {
        submissionId_ = value;
      }
    }

    /// <summary>Field number for the "test_point" field.</summary>
    public const int TestPointFieldNumber = 3;
    private string testPoint_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TestPoint {
      get { return testPoint_; }
      set {
        testPoint_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "source_code_id" field.</summary>
    public const int SourceCodeIdFieldNumber = 4;
    private string sourceCodeId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SourceCodeId {
      get { return sourceCodeId_; }
      set {
        sourceCodeId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as JudgeRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(JudgeRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SpecialJudgeId != other.SpecialJudgeId) return false;
      if (SubmissionId != other.SubmissionId) return false;
      if (TestPoint != other.TestPoint) return false;
      if (SourceCodeId != other.SourceCodeId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SpecialJudgeId != 0) hash ^= SpecialJudgeId.GetHashCode();
      if (SubmissionId != 0) hash ^= SubmissionId.GetHashCode();
      if (TestPoint.Length != 0) hash ^= TestPoint.GetHashCode();
      if (SourceCodeId.Length != 0) hash ^= SourceCodeId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SpecialJudgeId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(SpecialJudgeId);
      }
      if (SubmissionId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(SubmissionId);
      }
      if (TestPoint.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(TestPoint);
      }
      if (SourceCodeId.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(SourceCodeId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SpecialJudgeId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SpecialJudgeId);
      }
      if (SubmissionId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SubmissionId);
      }
      if (TestPoint.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TestPoint);
      }
      if (SourceCodeId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SourceCodeId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(JudgeRequest other) {
      if (other == null) {
        return;
      }
      if (other.SpecialJudgeId != 0) {
        SpecialJudgeId = other.SpecialJudgeId;
      }
      if (other.SubmissionId != 0) {
        SubmissionId = other.SubmissionId;
      }
      if (other.TestPoint.Length != 0) {
        TestPoint = other.TestPoint;
      }
      if (other.SourceCodeId.Length != 0) {
        SourceCodeId = other.SourceCodeId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SpecialJudgeId = input.ReadUInt32();
            break;
          }
          case 16: {
            SubmissionId = input.ReadUInt32();
            break;
          }
          case 26: {
            TestPoint = input.ReadString();
            break;
          }
          case 34: {
            SourceCodeId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class JudgeResult : pb::IMessage<JudgeResult> {
    private static readonly pb::MessageParser<JudgeResult> _parser = new pb::MessageParser<JudgeResult>(() => new JudgeResult());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<JudgeResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ParallelDaemon.Protocol.JudgeReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JudgeResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JudgeResult(JudgeResult other) : this() {
      type_ = other.type_;
      submissionId_ = other.submissionId_;
      testPoint_ = other.testPoint_;
      timeUsage_ = other.timeUsage_;
      memoryUsage_ = other.memoryUsage_;
      info_ = other.info_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JudgeResult Clone() {
      return new JudgeResult(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::ParallelDaemon.Protocol.JudgeResult.Types.ResultType type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ParallelDaemon.Protocol.JudgeResult.Types.ResultType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "submission_id" field.</summary>
    public const int SubmissionIdFieldNumber = 2;
    private uint submissionId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SubmissionId {
      get { return submissionId_; }
      set {
        submissionId_ = value;
      }
    }

    /// <summary>Field number for the "test_point" field.</summary>
    public const int TestPointFieldNumber = 3;
    private uint testPoint_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TestPoint {
      get { return testPoint_; }
      set {
        testPoint_ = value;
      }
    }

    /// <summary>Field number for the "time_usage" field.</summary>
    public const int TimeUsageFieldNumber = 4;
    private uint timeUsage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TimeUsage {
      get { return timeUsage_; }
      set {
        timeUsage_ = value;
      }
    }

    /// <summary>Field number for the "memory_usage" field.</summary>
    public const int MemoryUsageFieldNumber = 5;
    private uint memoryUsage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MemoryUsage {
      get { return memoryUsage_; }
      set {
        memoryUsage_ = value;
      }
    }

    /// <summary>Field number for the "info" field.</summary>
    public const int InfoFieldNumber = 6;
    private string info_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Info {
      get { return info_; }
      set {
        info_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as JudgeResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(JudgeResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (SubmissionId != other.SubmissionId) return false;
      if (TestPoint != other.TestPoint) return false;
      if (TimeUsage != other.TimeUsage) return false;
      if (MemoryUsage != other.MemoryUsage) return false;
      if (Info != other.Info) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (SubmissionId != 0) hash ^= SubmissionId.GetHashCode();
      if (TestPoint != 0) hash ^= TestPoint.GetHashCode();
      if (TimeUsage != 0) hash ^= TimeUsage.GetHashCode();
      if (MemoryUsage != 0) hash ^= MemoryUsage.GetHashCode();
      if (Info.Length != 0) hash ^= Info.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (SubmissionId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(SubmissionId);
      }
      if (TestPoint != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(TestPoint);
      }
      if (TimeUsage != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(TimeUsage);
      }
      if (MemoryUsage != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(MemoryUsage);
      }
      if (Info.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Info);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (SubmissionId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SubmissionId);
      }
      if (TestPoint != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TestPoint);
      }
      if (TimeUsage != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TimeUsage);
      }
      if (MemoryUsage != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MemoryUsage);
      }
      if (Info.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Info);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(JudgeResult other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.SubmissionId != 0) {
        SubmissionId = other.SubmissionId;
      }
      if (other.TestPoint != 0) {
        TestPoint = other.TestPoint;
      }
      if (other.TimeUsage != 0) {
        TimeUsage = other.TimeUsage;
      }
      if (other.MemoryUsage != 0) {
        MemoryUsage = other.MemoryUsage;
      }
      if (other.Info.Length != 0) {
        Info = other.Info;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            type_ = (global::ParallelDaemon.Protocol.JudgeResult.Types.ResultType) input.ReadEnum();
            break;
          }
          case 16: {
            SubmissionId = input.ReadUInt32();
            break;
          }
          case 24: {
            TestPoint = input.ReadUInt32();
            break;
          }
          case 32: {
            TimeUsage = input.ReadUInt32();
            break;
          }
          case 40: {
            MemoryUsage = input.ReadUInt32();
            break;
          }
          case 50: {
            Info = input.ReadString();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the JudgeResult message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum ResultType {
        [pbr::OriginalName("Accepted")] Accepted = 0,
        [pbr::OriginalName("WrongAnswer")] WrongAnswer = 1,
        [pbr::OriginalName("TimeLimitExceeded")] TimeLimitExceeded = 2,
        [pbr::OriginalName("MemoryLimitExceeded")] MemoryLimitExceeded = 3,
        [pbr::OriginalName("RuntimeError")] RuntimeError = 4,
      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
